#!/live/bin/sh

### BEGIN INIT INFO
# Provides:          live-usb-save
# Required-Start:
# Required-Stop:
# Should-Start:
# Default-Start:     3 4 5
# Default-Stop:      0 1 6
# Short-Description:
# Description:       save/restore some information on raw liveusb w/o persistence
### END INIT INFO

MSTATE_FILES="# File: machine-state-files
# Machine specific files to be saved across reboots

/etc/adjtime
/etc/udev/rules.d/*-persistent-net.rules
# /etc/X11/xorg.conf
/var/lib/alsa/asound.state
"
GSTATE_FILES="# File: general-state-files
# Files to be saved across reboots and across machines

/etc/localtime
/etc/timezone
/etc/wicd/*.conf
/etc/network/interfaces
/etc/network/interfaces.d/*

/var/log/live/persist-save.log
/var/log/live/live-remaster.log

# /etc/passwd
# /etc/shadow
# /etc/group
# /etc/gshadow
"

MSTATE_DIR=state/machine
GSTATE_DIR=state/general
USTATE_DIR=state/user

ID_DIR="/sys/class/dmi/id"
ID_FILES="board_vendor board_name board_version"

DS_FILE="/home/%s/.desktop-session/default-desktop"

export PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin

. /live/lib/live-init-utils.sh

. $INITRD_OUT

start_init_logging
load_translation

main() {
    case $1 in
        start) do_start   ;;
         stop) do_stop    ;;
            *) echo "Usage: $0 {start|stop}" ;;
    esac
    exit 0
}

do_start() {

    test -e /live/config/remasterable || exit 0
    read_cmdline

    local bdir root_dir
    for bdir in $SQFILE_DIR $TORAM_MP; do
        [ -d $bdir ] || continue
        root_dir=$bdir
        break
    done

    [ "$root_dir" ] || exit 0

    read_create_config_files $root_dir

    echo_script "$_Restore_state_information_" $0

    # Always restore machine specific state files
    restore_state $root_dir/$MSTATE_DIR "$(state_files "$MSTATE_FILES")" $(mach_id)

    # Only restore general state files and user files if root persistence is not
    # enabled
    # Not saving state when I enable persistence was a pain.
    # We'll see.  Maybe just restore it the first time?!
    #test -e /live/config/persist-root && return

    restore_state $root_dir/$GSTATE_DIR "$(state_files "$GSTATE_FILES")"

    [ "$PERSISTENCE" ] && return

    restore_desktop $root_dir/$USTATE_DIR
}

do_stop() {

    test -e /live/config/remasterable || exit 0
    read_cmdline

    local root_dir=$SQFILE_DIR

    if [ "$DID_TORAM" ];  then
        mount_boot_dev "$BOOT_UUID" "$BOOT_MP" || exit 0
        root_dir=$ROOT_MP
    fi

    read_create_config_files $root_dir

    echo_script "$_Save_state_information_" $0

    # See if we are on a vfat partition
    FS_TYPE=$(df -T $root_dir | tail -n1 | awk '{print $2}')

    save_desktop $root_dir/$USTATE_DIR
    save_state   $root_dir/$MSTATE_DIR "$(state_files "$MSTATE_FILES")" $(mach_id)
    save_state   $root_dir/$GSTATE_DIR "$(state_files "$GSTATE_FILES")"
}

read_create_config_files() {
    local dir="$1"

    local sem_file=$dir/state/no-state
    if [ "$DISABLE" ]; then
        mkdir -p $(dirname $sem_file)
        touch $sem_file
    elif [ "$ENABLE" ]; then
        rm -f $sem_file
    fi

    test -e $sem_file && exit 0
    local mlist_file=$dir/state/machine-state-files
    local glist_file=$dir/state/general-state-files

    # Create default config file if it doesn't already exist
    if test -r $mlist_file; then
        MSTATE_FILES=$(cat $mlist_file 2>/dev/null)
    else
        echo_cmd mkdir -p $(dirname $mlist_file)
        echo "$MSTATE_FILES" > $mlist_file
    fi

    # Create default config file if it doesn't already exist
    if test -r $glist_file; then
        GSTATE_FILES=$(cat $glist_file 2>/dev/null)
    else
        echo_cmd mkdir -p $(dirname $glist_file)
        echo "$GSTATE_FILES" > $glist_file
    fi
}

save_desktop() {
    local to_dir="$1"

    test -e $to_dir/no-state && return

    local user from to
    for user in $(ls /home); do
        from=$(printf $DS_FILE $user)
        [ -e "$from" ] || continue
        to="$to_dir/$user/default-desktop"
        should_copy "$from" "$to" || continue
        echo_live "$_Save_X_desktop_Y_" $(pquote $user) $(pquote $(cat $from))
        echo_cmd mkdir -p $(dirname "$to")
        echo_cmd cp "$from" "$to"
    done
}

restore_desktop() {
    local from_dir="$1"

    # There are many reasons to not restore
    [ "$CMD_DESKTOP" ] && return

    test -e $from_dir/no-state && return

    local user dest_dir dest sorc
    for user in $(ls $from_dir 2>/dev/null); do
        sorc=$from_dir/$user/default-desktop
        dest=$(printf $DS_FILE $user)
        dest_dir=$(dirname $dest)
        [ -d "$dest_dir" ] || continue
        [ -e "$sorc"     ] || continue
        should_copy $sorc $dest || continue
        echo_live "$_restore_X_desktop_to_Y_" $(pquote $user) $(pquote $(cat $sorc))
        echo_cmd cp "$sorc" "$dest"
        echo_cmd chown $user:users $dest
    done
}

save_state() {
    local state_dir="$1"  files="$2"  dir2="$3"
    test -e $state_dir/no-state && return

    # dir2 is typically/only a machine-id
    state_dir=$state_dir${dir2:+/$dir2}
    local perm_file=$state_dir/permissions

    # Create state directory if needed
    if ! test -e $state_dir; then
        echo_cmd mkdir -p $state_dir

        # Save some files to let humans identify the machine
        # But only if this is a machine-specific directory
        if [ "$dir2" ]; then
            for file in $ID_FILES; do
                test -r $ID_DIR/$file || continue
                echo_cmd cp $ID_DIR/$file $state_dir
            done
        fi
    fi

    # Delete saved files that no longer exist on system
    # Wildcards force us to use "find" here
    # Note: Could use wildcards with sed to change to
    # the files directory and get rid of find.
    local file
    for to in $(find $state_dir/files -type f 2>/dev/null); do
        from=${to#$state_dir/files}
        test -e $from || echo_cmd -f $to
    done

    # Save system files under state_dir
    for file in $files; do

        # Don't save from /live
        [ -z "${file##/live/*}" ] && continue

        local from=$file
        local to=$state_dir/files$file
        should_copy $from $to || continue
        echo_live "$_save_state_file_X_" $(wq $file)
        echo_cmd mkdir -p $(dirname $to)
        echo_cmd cp $from $to

        [ "$FS_TYPE" != "vfat" ] && continue

        # Save permission information on vfat LiveUSBs
        test -e $perm_file || touch $perm_file
        local perm=$(stat -c %a $file)
        grep -q "^$file:$perm$" $perm_file 2>/dev/null && continue
        if grep -q "$file:" $perm_file 2>/dev/null; then
            echo_cmd sed -i "s=^$file:.*=$file:$perm=" $perm_file
        else
            # echo "$file:$perm" >> $perm_file
            echo_cmd sed -i "$ a$file:$perm" $perm_file

        fi
    done
}

restore_state() {
    local state_dir="$1"  files="$2"  dir2="$3"
    test -e $state_dir/no-state && return

    # dir2 is typically/only a machine-id
    state_dir=$state_dir${dir2:+/$dir2}
    local perm_file=$state_dir/permissions

    if test -e $state_dir; then
        # Copy saved state files to system
        for from in $(find $state_dir/files -type f 2>/dev/null); do
            local to=${from#$state_dir/files}

            # Don't write to /live
            [ -z "${to##/live/*}" ] && continue

            should_copy $from $to || continue
            echo_live "$_restore_state_file_X_" $(wq $to)
            echo_cmd mkdir -p $(dirname $to)

            echo_cmd cp $from $to

            # make sure permissions match those of original (sigh: fat32)
            test -r $perm_file || continue
            local perm=$(grep "^$to:" $perm_file 2>/dev/null | cut -d: -f2)
            : ${perm:=644}
            [ "$perm" != "$(stat -c %a $to)" ] && echo_cmd chmod $perm $to
        done
    else
        # Delete machine-specific state files on a "new" machine
        [ "$dir2" ] || return
        for file in $MSTATE_FILES; do
            test -f $file || continue
            if [ "$file" = /etc/adjtime ]; then
                echo_live "$_Reset_file_X_" $(pquote $file)
                reset_adjtime $file
            else
                echo_live "$_delete_state_file_X_" $(pquote $file)
                echo_cmd rm -f $file
            fi
        done
    fi
}

mount_boot_dev() {
    uuid="$1"  mp="$2"
    ROOT_MP=

    debug "uuid=$uuid  mp=$mp"

    if [ -z "$uuid" ]; then
        echo_live "$_Could_not_find_UUID_of_boot_device_for_remounting_"
        echo_live "$_Will_not_save_state_information_"
        return 1
    fi

    local boot_dev=$(blkid -U $uuid)
    if [ -z "$boot_dev" ]; then
        echo_live "$_Could_not_find_boot_device_for_remounting_"
        echo_live "$_Will_not_save_state_information_"
        return 1
    fi

    local existing_mp=$(grep "^$boot_dev " /proc/mounts | cut -d" " -f2)
    debug "existing_mp=$existing_mp"
    if [ "$existing_mp" ]; then
        ROOT_MP=$existing_mp/$SQFILE_PATH
        return 0
    fi

    echo_cmd mkdir -p $mp
    echo_cmd mount UUID=$uuid $mp
    if ! grep -q "^$boot_dev $mp " /proc/mounts; then
        echo_live "$_Could_not_remount_boot_device_"
        echo_live "$_Will_not_save_state_information_"
        return 1
    fi

    ROOT_MP=$mp/$SQFILE_PATH
    return 0
}

read_cmdline() {
    : ${CMDLINE:=$(cat /proc/cmdline /live/config/cmdline)}
    local param
    for param in $CMDLINE; do
        value=${param#*=}
        case $param in
          nosavestate)  DISABLE=true       ;;
            savestate)  ENABLE=true        ;;
          dbsavestate)  DEBUG=true         ;;
            desktop=*)  CMD_DESKTOP=$value ;;
        esac
    done
}

should_copy() {
    local from="$1"  to="$2"
    [ -f "$from" ] || return 1
    [ -e "$to"   ] || return 0
    diff -q "$from" "$to" 1>/dev/null 2>/dev/null && return 1
    return 0
}

mach_id() {
    local data=$(find $ID_DIR/ -name "board_*" -exec cat '{}' + 2>/dev/null)
    if [ ${#data} -eq 0 ]; then
        echo "0000000000000000000000"
        return 1
    fi
    echo "$data" | md5sum | cut -d" " -f1 ;
    return 0
}

reset_adjtime() {
    local file=$1

    echo_cmd sed -i -e "1 s/.*/0.0 0 0.0/" -e "2 s/.*/0/" $file
}

state_files() { echo "$1" | grep -v "^\s*#" | sed "s/\s*#.*//" ;}

# For testing
echo_cmd() {
    [ "$DEBUG" ] && echo "$@"
    "$@"
}

debug() {
    [ -z "$DEBUG" ] && return
    echo "$*"
}

main "$@" 2>&1 | tee -a $INIT_LOG_FILE
