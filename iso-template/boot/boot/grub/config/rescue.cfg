#------------------------------------------------------------------
# rescue menu configurations
#
#------------------------------------------------------------------


function find_efi_bootloaders {

   if [ "$grub_platform" != "efi" ] ; then return ; fi

   submenu " "$"Find EFI bootloaders"  --class=efi_boot --hotkey=E --id 'find_efi_bootloaders' {
      set last_chosen="$chosen"; 
      found="false"
      found_one=""
      echo ""
      echo $"searching efi bootloaders"" ..."
      if [ "$grub_cpu" = "x86_64" ]; then
        set efi_arc="x64"
        set g2bootmgr="gnugrub.kernel64"
        set efi_reg="[Xx]64|core"
        set efi_reg="${efi_reg}|${g2bootmgr}"
        set efi_reg="(${efi_reg})[.][Ee][Ff][Ii]"
      fi
      if [ "$grub_cpu" = "i386" ]; then
        set efi_arc="ia32"
        set g2bootmgr="gnugrub.kernel32"
        set efi_reg="[Ii][Aa]32|[Bb][Oo][Oo][Tt]|[Gg][Rr][Uu][Bb]"
        set efi_reg="${efi_reg}|core"
        set efi_reg="${efi_reg}|${g2bootmgr}"
        set efi_reg="(${efi_reg})[.][Ee][Ff][Ii]"
      fi
      
      run="x"
      until [ "$found" ==  "true" -o "$run" == "xxx" ]; do
      
        unset found_one
        set core_efi="grub/${grub_cpu}-efi/core.efi"
         
        for efi in \
          (hd*,*)/EFI/*/*.* \
          (hd*,*)/boot/${core_efi} \
          (hd*,*)/${core_efi}  \
          (hd*,*)/grub2/g2bootmgr/${g2bootmgr}.efi 
        do
         
          if regexp '(\*)' "$efi"; then continue; fi
          
          if regexp '/EFI/' "$efi"; then 
             regexp -s 1:efi_device -s 2:efi_name -s 3:efi_ldr '^\((.*)\)/EFI/(.*)/(.*)' "${efi}"
             if regexp '^[Bb][Oo][Oo][Tt]$' "$efi_name"; then continue; fi
          elif regexp '/core[.]efi$' "$efi"; then 
             set efi_ldr="core.efi"
             regexp -s 1:efi_device '^\((.*)\)' "${efi}"
             set efi_name="$efi_device"
             probe -s efi_name -l ($efi_device)
             if [ -z "$efi_name" ] ; then set efi_name="[No Label]"; fi
          elif regexp "/${g2bootmgr}[.]efi" "$efi"; then 
             regexp -s 1:efi_device '^\((.*)\)' "${efi}"
             probe -s efi_name -l ($efi_device)
             # if [ -z "$efi_name" ] ; then set efi_name="[No Label]"; fi
             set efi_name="Grub2Win"
          else
            continue
          fi
          
          if ! regexp "${efi_reg}"'$'    "$efi_ldr"; then continue; fi
          if regexp '^[Ss][Hh][Ii][Mm]'  "$efi_ldr"; then continue; fi
          if regexp '^[Ff][Ww][Uu][Pp]'  "$efi_ldr"; then continue; fi
          if regexp '^[Mm][Mm]'          "$efi_ldr"; then continue; fi
          if regexp '^[Ff][Bb]'          "$efi_ldr"; then continue; fi
          if regexp '^[Ff][Aa][Ll][Ll]'  "$efi_ldr"; then continue; fi
          
          getdrive efi_drive $efi_device
          #if [ "x$efi_drive" == "x$cmd_drive" ]; then continue; fi 
          
          if [ ! -f "${efi}" ]; then continue; fi
          found=true
          if [ -z "$found_one" ]; then
             set found_one="y"
             menuentry " ===> "$"EFI Bootloader"" <===" {true}
          fi
          regexp -s efi_found '^(...............)'  "(${efi_device})      "
          echo $"found EFI bootloader at ""${efi_found}: ${efi_name}"
          regexp --set=1:name '^(............)' "${efi_name}               "
          probe -s fs_type -f "(${efi_device})"
          menuentry --class=found.efi " Boot ${name} @ ${efi}" "${fs_type}" "${efi_device}" "${efi}" {
             insmod "${2}"
             set root="${3}"
             chainloader "${4}"
          }
        done
               
         unset found_one
         for efi in (hd*,*)/EFI/*/*/bootmgfw.efi ; do
            if regexp '(\*)' "$efi"; then continue; fi
            if [ ! -f "${efi}" ]; then continue; fi

            regexp -s 1:efi_device -s 2:efi_name -s 3:efi_ldr '^\((.*)\)/EFI/(.*)/.*/(.*)' "${efi}"
            getdrive efi_drive $efi_device
            #if [ "x$efi_drive" == "x$cmd_drive" ]; then continue; fi 

            if regexp '^[Oo][Ee][Mm]$' "$efi_name"; then continue; fi

            found=true
            if [ -z "$found_one" ]; then
               set found_one="y"
               menuentry " ===> Windows Boot Manager <===" {true}
            fi
            regexp -s efi_found '^(...............)'  "(${efi_device})      "
            echo $"found EFI bootloader at ""${efi_found}: ${efi_name}"
            regexp --set=1:name '^(............)' "${efi_name}               "
            probe -s fs_type -f "(${efi_device})"
            menuentry --class=found.efi " Boot ${name} @ ${efi}" "${fs_type}" "${efi_device}" "${efi}" {
               insmod "${2}"
               set root="${3}"
               chainloader "${4}"
            }
         done
         
         unset found_one
         for efi in (hd*,*)/EFI/OEM/*/bootmgfw.efi ; do
            if regexp '(\*)' "$efi"; then continue; fi
            if [ ! -f "${efi}" ]; then continue; fi
            regexp -s 1:efi_device -s 2:efi_name -s 3:efi_ldr '^\((.*)\)/EFI/(.*)/.*/(.*)' "${efi}"
            getdrive efi_drive $efi_device
            #if [ "x$efi_drive" == "x$cmd_drive" ]; then continue; fi 

            found=true
            if [ -z "$found_one" ]; then
               set found_one="y"
               menuentry " ===> OEM Recovery Manager <===" {true}
            fi
            regexp -s efi_found '^(...............)'  "(${efi_device})      "
            echo $"found EFI bootloader at ""${efi_found}: ${efi_name}"
            regexp --set=1:name '^(............)' "${efi_name}               "
            probe -s fs_type -f "(${efi_device})"
            menuentry --class=found.efi " Boot ${name} @ ${efi}" "${fs_type}" "${efi_device}" "${efi}" {
               insmod "${2}"
               set root="${3}"
               chainloader "${4}"
            }

         done
         
         unset found_one
         # for efi in (hd*,*)/EFI/BOOT/boot*${efi_arc}.efi ; do
         for efi in (hd*,*)/EFI/BOOT/*.* ; do
            if regexp '(\*)' "$efi"; then continue; fi

            regexp -s 1:efi_device -s 2:efi_name -s 3:efi_ldr '^\((.*)\)/EFI/(.*)/(.*)' "${efi}"
            probe -s fs_type -f "(${efi_device})"
            getdrive efi_drive $efi_device
            #if [ "x$efi_drive" == "x$cmd_drive" ]; then continue; fi 

            if [ ! -f "${efi}" ]; then continue; fi

            if ! regexp "[Bb][Oo][Oo][Tt]${efi_reg}" "$efi_ldr"; then continue; fi
           
            set efi_chain="$efi"
            if [ "$fs_type" != "fat" ]; then
              if [ -e "($efi_device)/EFI/$efi_name/grub${efi_arc}.efi" ]; then
                set efi_chain="($efi_device)/EFI/$efi_name/grub${efi_arc}.efi"
                set efi_ldr=grub${efi_arc}.efi
              fi
              if [ "$efi_arc" = "ia32" ]; then
                if [ ! -e "($efi_device)/EFI/$efi_name/grub${efi_arc}.efi" -a \
                       -e "($efi_device)/EFI/$efi_name/grub.efi" ]
                then
                  set efi_chain="($efi_device)/EFI/$efi_name/grub.efi"
                  set efi_ldr=grub.efi
                fi
              fi
            fi
             
            found=true
            if [ -z "$found_one" ]; then
               set found_one="y"
               menuentry " ===> EFI Fallback Bootloader <===" {true}
            fi
            
            regexp -s efi_found '^(...............)'  "(${efi_device})      "
            echo $"found EFI fallback   at ""${efi_found}: ${efi_name}/${efi_ldr}"
            
            menuentry --class=found.efi " Boot Fallback @ ${efi_chain}" "${fs_type}" "${efi_device}" "${efi_chain}" {
               if [ -n "${2}" ]; then
                  insmod "${2}"   
               fi
               insmod chain
               set root="${3}"
               chainloader "${4}"
            }
            
         done
         
         run="x$run"
         sleep 1
      done

      if [ "${found}" != true ]; then
        secure_boot_warning
        menuentry --hotkey=q --class=found.none "No EFI bootloaders found." {main_menu}
      else
         echo    $"... finshed" 
         echo -n "Press <Enter> to continue "
         read  key
         unset key
         back_to_main_menu
      fi
   }
}


function find_grub_bootloaders {

   if [ "$grub_platform" != "pc" ] ; then return ; fi

   submenu " "$"Find GRUB bootloaders" --class=grub.boot --hotkey=L --id 'find_grub_bootloaders' {
      set last_chosen="$chosen"; 
      found="false"
      found_one=""
      echo ""
      echo $"searching grub bootloaders"" ..."
      set g2bootmgr="gnugrub.kernel"

      run="x"
      until [ "$found" ==  "true" -o "$run" == "xxx" ]; do
        unset found_one
        for grub in \
          (hd*,*)/boot/grub/${grub_cpu}-${grub_platform}/core.img \
          (hd*,*)/grub/${grub_cpu}-${grub_platform}/core.img \
          (hd*,*)/grub2/g2bootmgr/${g2bootmgr}.bios
        do
          if regexp '(\*)' "$grub"; then continue; fi
          if [ ! -f "${grub}" ]; then continue; fi

          regexp -s 1:grub_device -s 2:grub_ldr '^\((.*)\)/.*/(.*)$' "${grub}"
          regexp --set=1:grub_device '^\((.*)\)/' "${grub}"
          
          getdrive grub_drive $grub_device
          #if [ "x$grub_drive" == "x$cmd_drive" ]; then continue; fi 
          set found=true
          if [ -z "$found_one" ]; then
            set found_one="y"
            menuentry " ===> "$"GRUB Bootloader"" <===" {true}
          fi
          unset grub_label
          probe -s grub_label -l ($grub_device)
          if [ -z "$grub_label" ] ; then set grub_label="[No Label]"; fi

          regexp -s grub_found '^(...............)'  "(${grub_device})      "
          echo $"found GRUB bootloader at " "${grub_found}: ${grub_label}"
          unset fs_type
          probe -s fs_type -f "($grub_device)"
          
          menuentry --class=found.grub " "$"Boot GRUB loader"" @ ${grub_found} ${grub_label}" "${fs_type}" "${grub_device}"  "${grub}" {
            if [ -n "${2}" ]; then
               insmod "${2}"   
            fi
            insmod multiboot
            set root="${3}"
            multiboot "${4}"
          }
        done
        run="x$run"
        sleep 0.5
      done

      if [ "${found}" != "true" ]; then
          menuentry --hotkey=Q --class=found.none "No GRUB bootloaders found." {main_menu}
      else
         echo    $"... finshed" 
         echo -n "Press <Enter> to continue "
         read  key
         unset key
         back_to_main_menu
      fi
   }
}

function find_grub_menus {

   submenu " "$"Find GRUB menus" --class=grub_boot --hotkey=F --id 'find_grub_menus' {
      set last_chosen="$chosen"; 
      unset chosen
      found="false"
      set found_one=""
      echo ""
      echo $"searching grub.cfg menus"" ..."

      run="x"
      until [ "$found" ==  "true" -o "$run" == "xxx" ]; do
         unset found_one
         for grub in (hd*,*)/boot/grub/grub.cfg (hd*,*)/grub/grub.cfg ; do
            if regexp '(\*)' "$grub"; then continue; fi
            if [ -f "${grub}" ]; then
               regexp --set=1:grub_device '^\((.*)\)/' "${grub}"
               getdrive grub_drive $grub_device
               #if [ "x$grub_drive" == "x$cmd_drive" ]; then continue; fi 
               found=true
               if [ -z "$found_one" ]; then
                  set found_one="y"
                  menuentry " ===> GRUB-CFG-Menus <===" {true}
               fi

               unset grub_label
               probe -s grub_label -l ($grub_device)
               if [ -z "$grub_label" ] ; then set grub_label="[No Label]"; fi
               regexp -s grub_found '^(...............)'  "(${grub_device})      "
               echo $"found GRUB menu at"" ${grub_found}: ${grub_label}"
               unset fs_type
               probe -s fs_type -f "($grub_device)"
               menuentry --class=found.grub " "$"Load GRUB menu ""@ ${grub_found} ${grub_label}" "${fs_type}" "${grub_device}"  "${grub}" {
                  unset theme
                  terminal_output console
                  terminal_output gfxterm
                  background_image
                
                  if [ -n "${2}" ]; then
                     insmod "${2}"   
                  fi
                  set root="${3}"
                  set prefix="($root)/boot/grub"
                  configfile "${4}"
                  set prefix="$boot_prefix"
                  set root="$boot_root"
                  configfile $prefix/grub.cfg
                  main_menu

               }
             fi
         done
         run="x$run"
         sleep 0.5
      done

      if [ "${found}" != "true" ]; then
          secure_boot_warning
          menuentry --hotkey=q --class=found.none $"No GRUB CFG-Menu found." {main_menu}
      else
         echo    $"... finshed" 
         echo -n $"Press <Enter> to continue"" "
         read  key
         unset key
         back_to_main_menu
      fi
   }
}

# secure boot search
#
function find_grub_menus_sb {

   submenu " "$"Search GRUB Menus" --class=grub_boot --hotkey=F  --id 'find_grub_menus_sb' {

      set last_chosen="$chosen"
      set found="false"
      set found_one=""
      echo ""
      echo $"searching grub.cfg menus"" ..."
      for drive in 1 2 3 4 5 6 7 8; do 
        for part in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17; do
          set grub_device="hd${drive},$part"
        
          if ! test -e (${grub_device})/; then continue; fi
          for gpath in "/boot/grub" "/grub"; do

            if ! test -e (${grub_device})${gpath}/grub.cfg; then continue; fi
            set found="true"
            if [ -z "$found_one" ]; then
              set found_one="y"
              menuentry " ===> GRUB Menus <===" {true}
              secure_boot_warning

            fi
            unset grub_label
            probe -s grub_label -l ($grub_device)
            echo $"found GRUB menu at ""(${grub_device}) ${grub_label}"
            unset fstype
            probe -s fstype -f ($grub_device)

            menuentry --class=found.grub " "$"Load GRUB menu"" @ (${grub_device}) ${grub_label}" "${fstype}" "$grub_device"  "${gpath}" {
              unset theme
              terminal_output console
              terminal_output gfxterm
              background_image

              if [ -n "${2}" ]; then
                 insmod "${2}"   
              fi
              set root=(${3})
              set prefix="${4}"
              configfile $prefix/grub.cfg

              set prefix="$boot_prefix"
              set root="$boot_root"
              configfile $prefix/grub.cfg
              main_menu
            }
          done
        done
      done

      if [ "${found}" != "true" ]; then
          menuentry --hotkey=q --class=found.none $"No GRUB CFG-Menu found." {main_menu}
      else
         echo    $"... finshed" 
         echo -n "Press <Enter> to continue "
         read  key
         unset key
         back_to_main_menu
      fi
   }
}

function secure_boot_warning {
  if ! secure_boot; then return; fi
  menuentry --class=secure.boot_warning " *** "$"Secure Boot Restrictions"" ***" {true}
  
}

function uefi_fw_setup {
  if [ "$grub_platform" != "efi" ] ; then return ; fi
  menuentry "  "$"Reboot into BIOS/UEFI Setup" --class=efi_fw_setup {fwsetup}
}

function boot_rescue_menus {
   submenu " "$"Boot Rescue Menus"  --class=grub_rescue --hotkey=B  --id 'boot_rescue_menus' "$VERSION" {
      set version="$2"
      set show_version=""
      if [ -n "$version" ]; then
        set show_version="(version $version)"
      fi
      set last_chosen="$chosen"
      menu_color_normal="$default_color_normal"
      menu_color_highlight="$default_color_highlight"
      menuentry " ===> "$"Boot Rescue Menus"" <===  ${show_version}"   {true}   
      secure_boot_warning
      find_efi_bootloaders
      if ! secure_boot; then 
        find_grub_bootloaders
        find_grub_menus
      else
        find_grub_menus_sb
      fi
      find_windows_bootloader
      menuentry "  "$"Reboot"      --hotkey=R --class=reboot {reboot}
      menuentry "  "$"Power Off"   --hotkey=P --class=halt   {halt}
      uefi_fw_setup
      back_to_main_menu
   
   }

}

