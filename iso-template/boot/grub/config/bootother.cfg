#------------------------------------------------------------------
# file: /boot/grub/config/bootother.cfg
#
#------------------------------------------------------------------

function windows_efi {
  if [ "${grub_platform}" != "efi" ]; then return; fi
  insmod ntfs
  insmod chain
  set found="false"
  unset found_one
  echo ""
  echo $"searching Windows bootloaders"" ..."
  for drive in 1 2 3 4 5 6 ; do
    for part in 1 2 3 4 5; do
      if ! test -e (hd${drive},${part})/; then continue; fi
      if ! test -f (hd${drive},${part})/EFI/MICROSOFT/BOOT/BOOTMGFW.EFI ; then continue; fi
      set found="true"
      if [ -z "$found_one" ]; then
         set found_one="y"
         menuentry " ===> "$"Windows Bootloader"" <===" {true}
      fi
      echo $"found Windows bootloader at Hard Drive "" (hd${drive},${part})"
    
      menuentry " Boot Windows from Hard Drive (hd${drive},${part})" "${drive}"  "${part}"{
         set root=(hd${2},${3})
         chainloader /EFI/MICROSOFT/BOOT/BOOTMGFW.EFI
      }
      # break 2 # show all found
    done
   done
  if [ "${found}" != "true" ]; then
      menuentry --hotkey=Q --class=found.none "No Windows bootloaders found." {main_menu}
  else
     echo    $"... finshed" 
     echo -n "Press <Enter> to continue "
     read  key
     unset key
     back_to_main_menu
  fi
}


function windows_bootmgr {
  if [ "${grub_platform}" != "pc" ]; then return; fi
  echo ""
  echo $"searching Windows bootloaders"" ..."
  set found="false"
  unset found_one
  insmod fat
  insmod ntfs
  insmod part_msdos

  for ldr in (hd*,*)/bootmgr; do
    if regexp '(\*)' "$ldr"; then continue; fi
    unset win_device 
    unset win_loader
    regexp -s 1:win_device -s 2:win_loader  '^\((.*)\)/(.*)' "${ldr}"
    unset bcd_found
    for bcd in ($win_device)/????/???; do
      if ! regexp -s bcd_found '(/[Bb][Oo][Oo][Tt]/[Bb][Cc][Dd])' $bcd; then 
        continue
      else
        break
      fi
    done
      
    if [ -z "$bcd_found" ] ; then continue; fi
    
    set devnum=0
    regexp -s devnum 'hd([0-9]+)' $win_device
    unset fs_type
    probe -s fs_type -f "($win_device)"
    set found="true"
    if [ -z "$found_one" ]; then
       set found_one="y"
       menuentry " ===> "$"Windows Bootloader"" <===" {true}
    fi

    unset win_label
    probe -s win_label -l ($win_device)
    if [ -z "$win_label" ] ; then set win_label="[No Label]"; fi
    regexp -s win_found '^(...............)'  "(${win_device})      "
    echo $"found Windows bootloader at " "${win_found}: ${win_label}"




    menuentry --class=found.windows " Boot Windows from hard Drive ($win_device)/${win_loader}" "${fs_type}" "${win_device}" "${devnum}" "${win_loader}" {
      if [ -n "${2}" ]; then
         insmod "${2}"   
      fi
      insmod part_msdos
      insmod ntldr
      set root=($3)
      set devnumn="$4"
      set win_loader="$5"
      if [ "${win_loader}" = 'ntldr' -a  x"$devnum" != x"0" ]; then 
        drivemap -s hd0 $root
      fi
      ntldr /$win_loader
   }
   # show only first found if not "all" reuqested 
  done
  if [ "${found}" != "true" ]; then
      menuentry --hotkey=Q --class=found.none "No Window bootloaders found." {main_menu}
  else
     echo    "... "$"finshed" 
     echo -n "Press <Enter> to continue "
     read  key
     unset key
     back_to_main_menu
  fi

}


function find_windows_bootloader {

  submenu " "$"Find Windows bootloaders"  --class=windows_boot --hotkey=W --id 'find_windows_bootloaders' {
  
    set last_chosen="$chosen"; 
  
    if [ "${grub_platform}" = "efi" ]; then 
      windows_efi
    else
      windows_bootmgr
    fi
  }
}
